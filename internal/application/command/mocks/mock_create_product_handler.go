// Code generated by MockGen. DO NOT EDIT.
// Source: create_product.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_create_product_handler.go -package=mocks -source=create_product.go CreateProduct
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	command "github.com/alvarezjulia/meisterwerk-catalog/internal/application/command"
	gomock "go.uber.org/mock/gomock"
)

// MockCreateProduct is a mock of CreateProduct interface.
type MockCreateProduct struct {
	ctrl     *gomock.Controller
	recorder *MockCreateProductMockRecorder
	isgomock struct{}
}

// MockCreateProductMockRecorder is the mock recorder for MockCreateProduct.
type MockCreateProductMockRecorder struct {
	mock *MockCreateProduct
}

// NewMockCreateProduct creates a new mock instance.
func NewMockCreateProduct(ctrl *gomock.Controller) *MockCreateProduct {
	mock := &MockCreateProduct{ctrl: ctrl}
	mock.recorder = &MockCreateProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateProduct) EXPECT() *MockCreateProductMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockCreateProduct) Handle(ctx context.Context, cmd *command.CreateProductCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockCreateProductMockRecorder) Handle(ctx, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockCreateProduct)(nil).Handle), ctx, cmd)
}

// MockCreateProductRepository is a mock of CreateProductRepository interface.
type MockCreateProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreateProductRepositoryMockRecorder
	isgomock struct{}
}

// MockCreateProductRepositoryMockRecorder is the mock recorder for MockCreateProductRepository.
type MockCreateProductRepositoryMockRecorder struct {
	mock *MockCreateProductRepository
}

// NewMockCreateProductRepository creates a new mock instance.
func NewMockCreateProductRepository(ctrl *gomock.Controller) *MockCreateProductRepository {
	mock := &MockCreateProductRepository{ctrl: ctrl}
	mock.recorder = &MockCreateProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateProductRepository) EXPECT() *MockCreateProductRepositoryMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockCreateProductRepository) CreateProduct(product *command.CreateProductCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockCreateProductRepositoryMockRecorder) CreateProduct(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockCreateProductRepository)(nil).CreateProduct), product)
}
